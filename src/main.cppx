#include <iostream>
#include <string.h>
#include "pdulib.h"

//                                aleph  bet   yen    pound   turk  hangul  cyrillic
unsigned short stuff[] = {'a','b',0x05d0,0x05d1, 0x00a5,0x00a3,0x20ba, 0x3140, 0xa686};
unsigned char utf8[20];

//aleph bet gimmel dialled from 0545919886
//+CMT: "",27
const char pdu[] = "07917952140230F2040C917952541989680008128013713105210805D005D105D205D3";

//abcd from uk sim via partner 7 bit
//+CMT: "",23
//const char pdu[] = "0791797232080060040CA14487772342580000128013716170210441F1980C";
char errorMessage[50];
char pdubuffer[400];  // should be big enough

const char *phoneNumber = "+972545919886";
const char *recepient = "+972545289886";
const char *message7bit = "hello there";

PDU pduEngine = PDU();

int main(int argc, char *argv[])
{
#if 0
  int len;
  unsigned short ucs;
  // test basic elements
  for (unsigned i=0;i<sizeof(stuff)/sizeof(unsigned short);i++) {
    len = pduEngine.ucs2_to_utf8(stuff[i],utf8);
    bool testok = pduEngine.utf8_to_ucs2(utf8) == stuff[i];
    fwrite(utf8,1,len,stdout);
    std::cout << " reconvert ";
    if (testok)
      std::cout << "success\n";
    else
      std::cout << "fail\n";
  }

  len = pduEngine.ucs2_to_utf8(0x61,utf8);
  len = pduEngine.utf8Length(utf8);
  len = pduEngine.ucs2_to_utf8(0x05d0,utf8);
  len = pduEngine.utf8Length(utf8);
  ucs = pduEngine.utf8_to_ucs2(utf8);
  // check bad uft8
  *utf8 = 0b10000000;  // 1st byte wrong
  len = pduEngine.utf8Length(utf8);
  *utf8 = 0b11000000;  // 1st byte ok
  *(utf8+1) = 0b11000000; // 2nd btye wrong
  len = pduEngine.utf8Length(utf8);
  *(utf8+1) = 0b00000000; // 2nd btye wrong
  len = pduEngine.utf8Length(utf8);
	if (pduEngine.decodePDU(pdu)) {
		std::cout << "SCA: " << pduEngine.getSCA() << std::endl;
		std::cout << "Sender: " << pduEngine.getSender() << std::endl;
		std::cout << "TS: " << pduEngine.getTimeStamp() << std::endl;
		std::cout << "Message: ";
		fwrite(pduEngine.getText(),1,pduEngine.getUtf8Length(),stdout);
	}
	if (pduEngine.encodePDU(pdubuffer,recepient,message7bit,ALPHABET_7BIT) != -1) {
    std::cout << "Encode 7 bit OK\n";
  }
  else
    std::cout << "Encode 7 bit fail\n";
  for (i = 0; i < spl; i += 2)
  {
    X = gethex(&pdu[index]);
    index += 2;
    senderbuff[outindex++] = (X & 0xf) + 0x30;
    senderbuff[outindex++] = (X >> 4) + 0x30;
  }
  #endif
  pduEngine.decodeAddress(pdu,pdubuffer,OCTETS);
}